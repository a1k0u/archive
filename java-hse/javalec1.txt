Java - замечательный продукт компании Sum Microsystems. Был изобретен в 1991 году, когда люди начали массово писать код. Всем было ясно, что плюсы - г*. Плюсы - это не плохой язык, потому что писать большой код на тех плюсах было категорически тяжело, так как синтаксис и стандартная библиотека были далеки от идеала. Да и плюсы сильно приближены к низкоуровневому программированию, как следствие позволяет делать много хорошого и плохого. 

Второе, в то время начали появляться различные платформы. Никто в 80-х годах не думал, что будет так много операционных систем. Стало оказываться, что код на плюсах на разых платформах не работает. Хочется чего-то универсального.

Третье, Sun Microsystems предвидели будущее: программистов нужно делать много, пусть и плохих. Они хотели, чтобы плохие программисты могли писать код, потому что на плюсах такой трюк не пройдет. Они решили назвать его "дуб" (oak).

В итоге они написали его, даже запустили на новой платформе в 92 году. Но вот неудача, язык медленно работает, и не устраивает никого. Вот бы им закрыться, но в 93 году они попытались занять нишу ТВ приставок в виде софта. Реализвали, выяснили, что работает категорически медленно. Но они разработали для языка графический интерфейс как результат.

В 94 году они сумели применить язык, чтобы в веб браузере запускать динамический код. Джава позволила вставлять графические апплеты в сайт и делать красивые и простые вещи, которые работали на любой платформе и в любом браузере. И вот! Они попали в свою нишу. Ну и назвали его джавой. Все начали писать апплеты и плеваться в сторону джавы.

Параллельно с этим джава развивалась в другом направлении, для того чтобы был джава апплет, что-то делает, ему нужна серверная сторона, которая от этого апплета обрабатывает запросы. Поиэтому частично код, который был на апллетах начали запускать на серверах в качестве бекенда.

Запишем эволюцию вкраце:

- 1991. Внутренний проект Sun Microsystems по созданию платформы для разработки встраиваемых систем - Green Project вместо C++ решили слздать новый язык, названный Oak.
- 1992. Первое демонстрационное устройство на новой платформе - PDA Star7.
- 1993. Попытка занять нишу ТВ-приставок для кабельного телевидения.
- 1994. Фокус на разработке интерактивных приложений (апплетов) для веб-страниц; Язык переименован в Java
- 1996. Java Development Kit 1.0.

Первая версия джавы появилась в 1996 году и состояла из таких вещей: вирутальной машины (JVM - java virtual machine specification), стандартной библиотеки (соответствует версии платформы) и компилятора (JLS - java langiage specification).

В итоге джава апплеты начали умирать, так как пояивлся нормальный JS, Microsoft выпустил Silver Light, Adobe выпустили Flash и много технологий, который вытеснули меделнный джава с инетрнета. Вот бы ему опять умиреть, но блин чертовский классный язык выжил, так как много людей, кто писали бекенд на джаве, поняли, что это явно лучше, чем на плюсах. Невзирая ни на что (медленность языка, мало программистов) джава стала развиваться как язык для бекенда.

С 1998 года Java начала называться, как Java 2. Поэтому полное название версии 2000 года - Java 2 1.3. Да, а потом в 2004 Java 5. Антон Михайлович начал работать на джаве в 2004 году на работе. Тогда же в джаве прошли координальные работы по ускорению, а в третьих люди пересмотрели всю внутренную организацию Джавы и внесли много обновлений, который украл C++. В 2004 году была предложена модель памяти джава. 

Джавы клипаются два раза в год. 9 джава была языком, которая внесла полезные вещи для программистов, отсальные версии затрагивают вещи внтури джавы или конфигурацию виртулаьной машины.

Маскота зовут Дюк. Логотип символизирует количество выпитого кофе.

Итого история и эколюция Java.

- 1996. JDK 1.0
- 1997. JDK 1.1, JLS 2.0 для кофеварок
- 1998. J2SE 1.2, "Java 2", разделение на SE/EE, JVM 2.0
- 2000. J2SE 1.3, выделена ME
- 2002. J2SE 1.4
- 2004. J2SE 5.0, изменение нумерации, JLS 3.0., Generics
- 2006. Java SE 6, уход от понятия "Java 2"
- 2011. Java SE 7
- 2014. Java SE 8. Steam, lambdas
- 2017. Java SE 9. Модули
- 2018. Java SE 10. Var
- 2018. Java SE 11. JShell
- 2019. Java SE 12
- 2019. Java SE 13
- 2020. Java SE 14
- 2020. Java SE 15
- 2021. Java SE 16
- 2021. Java SE 17. LTS

Зачем же все-таки джава?

Плюсы прекрасные код, позоляющий писать высокоэффиктивный код, но вто же время он сложно поддерживается в больших проектах. Да и перенос на другие архитектуры - это сложно. (вопрос про си шарп) Люди знающие джаву беспроблем изучают Си Шарп. Зная Kotlin легко перейти на Kotlin.

Особенности Java.

Первое, что нужно понять, что программа написанная на языке Java исполняется концептуально по-другому, чем на плюсах. Так как на плюсах исходный код идет сцеальной программе -компилятору, а он же выдает машинный код, который исполняется на процессоре. Классно, что можно скомпилить (может долго идти процесс), а потом запускать, но минус, что тяжело переносить на другую платформу.

Код Java тоже идет в компилятор, но результат промежуточное состояние - байткод виртуальной машины. Этот байткод идет в JVM, а он исполняет его на процессоре. Зачем?? На это есть миллион причин:
- Кросс-платформенность. Есть момент, что многие люди плохо понимают, что такое кросплатформенность. Для того, чтобы запустить джаву на другой платформе, на ней должна юыть виртуальная машина, а с этим беда. В Джаве кроссплатформенность  означает, что программа написанная на этом языке будет означать, что программа будет одинаково работать на любой платформе, где есть виртуадбная машина. Виртуальная машина обеспечивает одинаковость работы. Для того, чтобы вирутуальная машина называлась виртуальной машиной она должна пройти специальную сертификацию.

В Java нет UB, так как все сильно стандартизиорованно, поэтому мы можем быть уверенны, что все будет хорошо работать. Создатели Java заботятся о прогаммистах, в стандарте языка написаны Java Coding Convections (типа pep8). 

Из-за того, что Джава исполняется на виртуальной машине может делать некоторые оптимизации, в отличие от плюсов - JIT (just in time compilation). Так как у нас есть контекст (какие классы загруженны, какие объекты существует, значения переменных, ..), исходя из этого, что не доступно при обычной компиляции, можно в ран тайме вносить оптимизации.

Пример: (нет доски...) цикл с каким-то действием можно сложиться в одну строчку. В байткоде мы знает, кто наследуется от класса, или от кого он произведен, поэтому происходит девиртулизация.

Итого про виртуальную машину и байткод:
- Интерпретация байткода на порядок (10-20 раз) медленне исполнения аналогичсного машинного кода..
- но есть Just-In-Time компиляция
	- виртуальная машина компилирует байткод в машинный код
	- используется с JDK 1.2
- а также HotSpot (основная виртуальная машина Java для настольных компьютеров и серверов, выпускаемая корпорацией Oracle)
	- адаптивный оптимизирующий JIT-компилятор
	- используется с JDK 1.3
- в результате Java 7 всего в 1.5-2 раза медленные С, а в некоторых тестах не хуже или даже быстрее!

Зачем нужна JVM? Память. В плюсах течет память, санитайзеры могут помочь, но все равно иногда течет. А программа написанная на Java работает на виртуальной машине, которая и занимается (работает) с памятью. Только виртуальную машину можно просить выделить память. Это не означает, что в Java нет утечек в памяти, они есть, но совсем другие. Утечка в Java, когда сохраняются ссылки на объекты, которые никогда не понадобятся.

Вывод про то, что JVM удаляет объекты, на которые нет ссылок - неверный, в таком случае неудалялись циклически связанные объекты. Как же понять, что не нужно? На стеке есть объекты, запустим от туда DFS, тогда всё до чего я доберусь - всё то, до чего я могу в теории добраться. Если быть осторожнее в определении, то DFS нужно запускать не со стека, а со стеков и статической памяти, так как программа многопоточна.

Пример: пользователь ввел строку 10^9, а мы используем только подстроку размером 100 символов, то есть поддерживаем ссылку. Этот объект будет лежать в памяти - утечка памяти.

Также JVM дает очень много безопасности. Стандартная проблема плюсового кода - безопасность, можно лезть в чужую память и так далее. Все действия инкапсулированны внутри виртуальной машины, весь код Java исполняется только внтури JVM (то есть в песочнице).

То есть оприори мы не можем вылезти за рамки вирутальной машины, можно верефицировать байт-код, надеясь, чтобы его никто не поменял. Тут нет арифметики указателей, поэтому мы не можем влезть в чужую память. JVM можно регламентировать запуск Java кода, например не давать доступ в сеть.

Итого про JVM:

- Сборка мусора
- Верификация байткода
	- некорректный байткод будет отвергнут перед исполнением
- Автоматическое управление памятью
	- нет арифметики указателей
	- невозможно испорить память
- Встроенный еханизм управления правами 
	-можно запустить код в "песочнице" без доступа к файлам, к сети, без возможности создавать потоки и т.п.
	

Java создавался как язык для многих платформ, поэтому из коробки там много чего. Со второй версии Java заложенна хорошая многопоточность. С пятой версии блестящая многоточность. Джава также поддерживает распределенные вычисления.

Итого: 

- Многопоточность
	- Встроенная поддержка потоков
	- Богатая библиотека примитивов синхронизации
- Распределенность
	- встроенные сетевые возможности
	- пересылка данных и объектов по сети
	- работа с удаленными объектами (RMI)

Разновидности Java.

Компания Sun Microsystems была куплена компанией Oracle. Есть два варианта хотелок: просто запускать программы (нужна только вирутльаная машина и стандартная библиотека для запуска скомпилированных программ - JRE java runtime environment), или же писать программы (нужен ещё компилятор, то есть JDK java developer kit - набор инструментов для разработки и JRE).


Редакции Java

- Standart Edition (SE) - desktop
- Micro Edition (ME) - подмножество SE + специфические библиотеки (типа кнопочные телефоны)
- Enterprise Edition (EE) - SE + доп. библиотеки и возможности (для серверов)
- Java Card - сильно урезанная версия SE, изменения в виртуальной машине (пропуска с процессором и командами)
 
 Как Java добралась до мобилок? Все зотелось писать для мобильного линукса так, чтобы кож работал везде. Под мобилками разнообразие железа большое.
 
 В питоне классно есть одна эталонная реализация - cpython. А вот в джава нужно пройти сертификацию, поэтому есть популрные решения - Oracle Java, OpenJDK, IcedTea, IBM j9

Kotlin, Scala, Clojure, JRuby, Jython компилирубтся в байт-код java машины.

Задание на дом. Все те, кто говорят, что пайтон интерпритируемый язык должен получить прямой удар правой руки в глаз. Так как Python работает по той же системе что и Java. В питоне строится ast, разбивается на лексемы, операторы, переменные и т.д. а потом превращается в байткод и только потом в интерпритатор. 

